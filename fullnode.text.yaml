version: "3"

networks:
  # network to contain the services
  # NB: the mask is important for bitcoind permissions
  btc-logger-network:
    ipam:
      driver: default
      config:
        - subnet: $BTC_NETMASK

services:
  # BITCOIND FULL NODE
  bitcoind:
    build: ./from-repo
    networks: [btc-logger-network]
    volumes: 
      - $DATA_DIR/blks:/block-data
    ports:
     - $BITCOIND_ZMQ_PORT:$BITCOIND_ZMQ_PORT
     - $BITCOIND_RPC_PORT:$BITCOIND_RPC_PORT

    logging:
      options:
        max-file: "4"
        max-size: "100k"

    #NB: this command does chown as a hack to write on the
    #    mapped volumes, would be better to use docker volumes
    #    but how to map a local dir to a docker volume?
    command:
      - "/bin/bash"
      - -c
      - |
          chown root:root /block-data && \
          bitcoind \
            -datadir=/block-data \
            -txindex=1 \
            -zmqpubrawtx=tcp://0.0.0.0:$BITCOIND_ZMQ_PORT \
            -zmqpubhashtx=tcp://0.0.0.0:$BITCOIND_ZMQ_PORT \
            -server \
            -rpcuser=$BITCOIND_RPC_USER \
            -rpcpassword=$BITCOIND_RPC_PASS \
            -rpcallowip=$BTC_NETMASK \
            -rpcbind=0.0.0.0:$BITCOIND_RPC_PORT \
            -rpcport=$BITCOIND_RPC_PORT \
            -maxmempool=30 \
            -dbcache=80 \
            -par=1 \
            -rpcthreads=1

#            -reindex \

#            -zmqpubhashblock=tcp://0.0.0.0:$BITCOIND_ZMQ_PORT \
#            -debug=rpc \
#            -debug=zmq \
#            -debug=net \
#            -debug=http

  # TRANSACTION LOGGER
  txlog:
    build:
      context: ./txlog
      args:
        BASE_IMAGE: $PYTHON_ZMQ_IMAGE

    networks: [btc-logger-network]
    volumes:
      - $DATA_DIR/unc:/txs
    environment:
      RAWTX_SOURCE_ADDR: tcp://bitcoind:$BITCOIND_ZMQ_PORT
      BITCOIND_HOST: bitcoind
      BITCOIND_PORT: $BITCOIND_RPC_PORT
      BITCOIND_RPC_USER: $BITCOIND_RPC_USER
      BITCOIND_RPC_PASSWORD: $BITCOIND_RPC_PASS
      OUTPUT_FILE: /txs/txc
      RAWTX_COMPRESSED_LOGS: 1
      RAWTX_COUNT_PER_FILE: 20000
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_REGION_NAME: $AWS_REGION_NAME
      AWS_BUCKET_NAME: $AWS_BUCKET_NAME
      AWS_FILE_PREFIX: "txc/txt"
 
    logging:
      options:
        max-file: "2"
        max-size: "50k"

    depends_on:
      - bitcoind

    command:
      - "/bin/sh"
      - -c
      - |
          chown root:root /txs && \
          sleep 10 && \
          python3 -u /usr/local/bin/zmq_c.py

  # RPC TESTS
  # test remote producecalls to bitcoind from a python script
  test-rpc-py:
    build:
      context: ./test-rpc-py
      args:
        BASE_IMAGE: $PYTHON_ZMQ_IMAGE

    networks: [btc-logger-network]
    command:
      - "/bin/sh"
      - "-c"
      - "hostname -i && python -u /usr/local/bin/getchaininfo.py"
    environment:
      RPC_HOST: bitcoind
      RPC_PORT: $BITCOIND_RPC_PORT
      RPC_USER: $BITCOIND_RPC_USER
      RPC_PASS: $BITCOIND_RPC_PASS
    logging:
      options:
        max-file: "4"
        max-size: "100k"

  # test rpc to bitcoind from curl
  test-rpc-curl:
    build: ./test-rpc-curl
    networks: [btc-logger-network]
    command:
     - "/bin/sh"
     - "-c"
     - |
         hostname -i && \
         curl \
           -v \
           -u $BITCOIND_RPC_USER:$BITCOIND_RPC_PASS \
           -d '{"jsonrpc": "2.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }' \
           -H 'content-type: text/plain;' \
           http://bitcoind:$BITCOIND_RPC_PORT/
    logging:
      options:
        max-file: "4"
        max-size: "100k"
